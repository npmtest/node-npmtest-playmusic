{"/home/travis/build/npmtest/node-npmtest-playmusic/test.js":"/* istanbul instrument in package npmtest_playmusic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-playmusic/lib.npmtest_playmusic.js":"/* istanbul instrument in package npmtest_playmusic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_playmusic = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_playmusic = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-playmusic/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-playmusic && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_playmusic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_playmusic\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_playmusic.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_playmusic.rollup.js'] =\n            local.assetsDict['/assets.npmtest_playmusic.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_playmusic.__dirname + '/lib.npmtest_playmusic.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-playmusic/node_modules/playmusic/play.js":"/* Node-JS Google Play Music API\n *\n * Written by Jamon Terrell <git@jamonterrell.com>\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * Based partially on the work of the Google Play Music resolver for Tomahawk (https://github.com/tomahawk-player/tomahawk-resolvers/blob/master/gmusic/content/contents/code/gmusic.js)\n * and the gmusicapi project by Simon Weber (https://github.com/simon-weber/Unofficial-Google-Music-API/blob/develop/gmusicapi/protocol/mobileclient.py).\n */\nvar https = require('https');\nvar querystring = require('querystring');\nvar url = require('url');\nvar CryptoJS = require(\"crypto-js\");\nvar uuid = require('node-uuid');\nvar util = require('util');\nvar crypto = require('crypto');\n//var async = require('async');\n\nvar pmUtil = {};\npmUtil.parseKeyValues = function(body) {\n    var obj = {};\n    body.split(\"\\n\").forEach(function(line) {\n        var pos = line.indexOf(\"=\");\n        if(pos > 0) obj[line.substr(0, pos)] = line.substr(pos+1);\n    });\n    return obj;\n};\npmUtil.Base64 = {\n    _map: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    stringify: CryptoJS.enc.Base64.stringify,\n    parse: CryptoJS.enc.Base64.parse\n};\npmUtil.salt = function(len) {\n    return Array.apply(0, Array(len)).map(function() {\n        return (function(charset){\n            return charset.charAt(Math.floor(Math.random() * charset.length));\n        }('abcdefghijklmnopqrstuvwxyz0123456789'));\n    }).join('');\n};\n\n\nvar PlayMusic = function() {};\n\nPlayMusic.prototype._baseURL = 'https://www.googleapis.com/sj/v1.11/';\nPlayMusic.prototype._webURL = 'https://play.google.com/music/';\nPlayMusic.prototype._mobileURL = 'https://android.clients.google.com/music/';\nPlayMusic.prototype._accountURL = 'https://www.google.com/accounts/';\nPlayMusic.prototype._authURL = 'https://android.clients.google.com/auth';\n\nPlayMusic.prototype.request = function(options, callback) {\n    var opt = url.parse(options.url);\n    opt.headers = {};\n    opt.method = options.method || \"GET\";\n    if(typeof options.options === \"object\") {\n        Object.keys(options.options).forEach(function(k) {\n            opt[k] = options.options[k];\n        });\n    }\n    if(typeof this._token !== \"undefined\") opt.headers.Authorization = \"GoogleLogin auth=\" + this._token;\n    opt.headers[\"Content-type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n    var req = https.request(opt, function(res) {\n        res.setEncoding('utf8');\n        var body = \"\";\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var err;\n            if(res.statusCode >= 400) {\n                err = new Error(res.statusCode + \" error from server\");\n                err.statusCode = res.statusCode;\n                err.response = res;\n            }\n\n            var contentType = (typeof res.headers[\"content-type\"] !== \"string\") ? null : res.headers[\"content-type\"].split(\";\", 1)[0].toLowerCase();\n            var response = body;\n            try {\n                if(contentType === \"application/json\") {\n                    response = JSON.parse(response);\n                }\n            } catch (e) {\n                if(typeof callback === \"function\") callback(new Error(\"unable to parse json response: \" + e), null, res);\n            }\n            if(typeof callback === \"function\") callback(err, response, res);\n        });\n        res.on('error', function(error) {\n            var err = new Error(\"Error making https request\");\n            err.error = error;\n            err.response = res;\n            if(typeof callback === \"function\") callback(err, body, res);\n        });\n    });\n    if(typeof options.data !== \"undefined\") req.write(options.data);\n    req.end();\n};\n\n\nPlayMusic.prototype.init = function(config, callback) {\n    var that = this;\n\n    this._email = config.email;\n    this._password = config.password;\n    this._masterToken = config.masterToken;\n\n    // load signing key\n    var s1 = CryptoJS.enc.Base64.parse('VzeC4H4h+T2f0VI180nVX8x+Mb5HiTtGnKgH52Otj8ZCGDz9jRWyHb6QXK0JskSiOgzQfwTY5xgLLSdUSreaLVMsVVWfxfa8Rw==');\n    var s2 = CryptoJS.enc.Base64.parse('ZAPnhUkYwQ6y5DdQxWThbvhJHN8msQ1rqJw0ggKdufQjelrKuiGGJI30aswkgCWTDyHkTGK9ynlqTkJ5L4CiGGUabGeo8M6JTQ==');\n\n    for(var idx = 0; idx < s1.words.length; idx++) {\n        s1.words[idx] ^= s2.words[idx];\n    }\n\n    this._key = s1;\n\n    this._oauth(function(err, data) {\n        if(err) return callback(new Error(\"Unable to create oauth token\" + err));\n        that._token = data.Auth;\n        that.getSettings(function(err, response) {\n            if(err) return callback(new Error(\"Login Failed, unable to load settings:\" + err));\n\n            that._settings = response.settings;\n            that._allAccess = response.settings.entitlementInfo.isSubscription;\n            var devices = response.settings.uploadDevice.filter(function(d) {\n                return d.deviceType === 2 || d.deviceType === 3;\n            });\n\n            if(devices.length > 0) {\n                var id = devices[0].id;\n                if (devices[0].deviceType === 2) {\n                    id = id.slice(2);\n                }\n                that._deviceId = id;\n                if(typeof callback === \"function\") callback();\n            } else {\n                if(typeof callback === \"function\") callback();\n            }\n        });\n\n    });\n};\n\nPlayMusic.prototype._oauth =  function (callback) {\n    var that = this;\n    var data = {\n        accountType: \"HOSTED_OR_GOOGLE\",\n        has_permission: 1,\n        service: \"sj\",\n        source: \"android\",\n        androidId: that._androidId,\n        app: \"com.google.android.music\",\n        device_country: \"us\",\n        operatorCountry: \"us\",\n        //client_sig: \"61ed377e85d386a8dfee6b864bd85b0bfaa5af81\",\n        lang: \"en\",\n        sdk_version: \"17\"\n    };\n    if(this._masterToken) {\n        data.Token = this._masterToken;\n    } else if(this._password) {\n        data.Passwd = this._password;\n        data.Email = that._email.trim();\n\n    } else {\n        callback(new Error(\"You must provide either an email address and password, or a token\"));\n    }\n\n    this.request({\n        method: \"POST\",\n        url: that._authURL,\n        contentType: \"application/x-www-form-urlencoded\",\n        data: querystring.stringify(data),\n        headers: {\n            //Authorization: \"GoogleLogin auth=\" + that._master_token\n        }\n    },  function(err, data) {\n        callback(err, err ? null : pmUtil.parseKeyValues(data));\n    });\n};\nPlayMusic.prototype.login =  function (opt, callback) {\n    var that = this;\n    opt.androidId = opt.androidId || crypto.pseudoRandomBytes(8).toString(\"hex\");\n    var data = {\n        accountType: \"HOSTED_OR_GOOGLE\",\n        Email: opt.email.trim(),\n        has_permission: \"1\",\n        add_account: \"1\",\n        Passwd: opt.password.trim(),\n        service: \"ac2dm\",\n        source: \"android\",\n        androidId: opt.androidId,\n        device_country: \"us\",\n        operatorCountry: \"us\",\n        lang: \"en\",\n        sdk_version: \"17\"\n    };\n    this.request({\n        method: \"POST\",\n        url: this._authURL,\n        contentType: \"application/x-www-form-urlencoded\",\n        data: querystring.stringify(data)\n    },  function(err, data) {\n        var response = pmUtil.parseKeyValues(data);\n        callback(err, err ? null : {androidId: opt.androidId, masterToken: response.Token});\n    });\n};\n\n\n/**\n * Returns settings / device ids authorized for account.\n *\n * @param callback function(err, settings) - success callback\n */\nPlayMusic.prototype.getSettings = function(callback) {\n    var that = this;\n\n    this.request({\n        method: \"POST\",\n        url: this._webURL + \"services/fetchsettings?\" + querystring.stringify({u: 0}),\n        contentType: \"application/json\",\n        data: JSON.stringify({\"sessionId\": \"\"})\n    }, function(err, body) {\n        if(err) return callback(new Error(\"error loading settings: \" + err), body);\n        // loadsettings returns text/plain even though it's json, so we have to manually parse it.\n        var response;\n        try {\n            response = JSON.parse(body);\n        } catch (e) {\n            callback(new Error(\"error parsing settings: \" + e), body);\n        }\n        callback(null, response);\n    });\n};\n\n/**\n * Returns list of all tracks\n *\n * @param callback function(err, trackList) - success callback\n */\nPlayMusic.prototype.getLibrary = PlayMusic.prototype.getAllTracks = function(opts, callback) {\n    var that = this;\n\n    // If first parameter is a callback, shift it over to the second param\n    if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n    }\n    // Set options defaults\n    opts.limit = opts.limit || 1000;\n\n    // Request body data\n    var data = { \"max-results\": opts.limit };\n    // Add 'start-token' if a continuation token was provided\n    if (!!opts.nextPageToken) {\n        data[\"start-token\"] = opts.nextPageToken;\n    }\n\n    this.request({\n        method: \"POST\",\n        url: this._baseURL + \"trackfeed\",\n        contentType: \"application/json\",\n        data: JSON.stringify(data)\n    }, function(err, body) {\n        if(err) return callback(new Error(\"error getting library: \" + err), body);\n        callback(null, body);\n    });\n};\n\n/**\n * Returns stream URL for a track.\n *\n * @param id string - track id, hyphenated is preferred, but \"nid\" will work for all access tracks (not uploaded ones)\n * @param callback function(err, streamUrl) - success callback\n */\nPlayMusic.prototype.getStreamUrl = function (id, callback) {\n    if(!this._deviceId) {\n      callback(new Error(\"Unable to find a usable device on your account, access from a mobile device and try again\"));\n      return;\n    }\n\n    var that = this;\n    var salt = pmUtil.salt(13);\n    var sig = CryptoJS.HmacSHA1(id + salt, this._key).toString(pmUtil.Base64);\n    var qp = {\n        u: \"0\",\n        net: \"wifi\",\n        pt: \"e\",\n        targetkbps: \"8310\",\n        slt: salt,\n        sig: sig\n    };\n    if(id.charAt(0) === \"T\") {\n        qp.mjck = id;\n    } else {\n        qp.songid = id;\n    }\n\n    var qstring = querystring.stringify(qp);\n    this.request({\n        method: \"GET\",\n        url: this._mobileURL + 'mplay?' + qstring,\n        options: { headers: { \"X-Device-ID\": that._deviceId } }\n    }, function(err, data, res) {\n        if(res.statusCode === 302 && typeof res.headers.location === \"string\") {\n            callback(null, res.headers.location);\n        } else {\n            callback(new Error(\"Unable to get stream url\" + err), res.headers.location);\n        }\n    });\n};\n\n/**\n * Opens and returns a stream object\n *\n * @param id string - track id, hyphenated is preferred, but \"nid\" will work for all access tracks (not uploaded ones)\n * @param callback function(stream) - success callback\n */\nPlayMusic.prototype.getStream = function(id, callback) {\n    this.getStreamUrl(id, function(err, url) {\n        if(err) return callback(err);\n        https.get(url, function(stream) {\n            callback(null, stream);\n        })\n    })\n}\n\n/**\n * Searches for All Access tracks.\n *\n * @param text string - search text\n * @param maxResults int - max number of results to return\n * @param callback function(err, searchResults) - success callback\n */\nPlayMusic.prototype.search = function (text, maxResults, callback) {\n    var that = this;\n    var qp = {\n        q: text,\n        ct: '1,2,3,4,5,6,7,8,9',\n        \"max-results\": maxResults\n    };\n    var qstring = querystring.stringify(qp);\n    this.request({\n        method: \"GET\",\n        url: this._baseURL + 'query?' + qstring\n    }, function(err, data) {\n        callback(err ? new Error(\"error getting search results: \" + err) : null, data);\n    });\n};\n\n/**\n * Returns list of all playlists.\n *\n * @param callback function(err, playlists) - success callback\n */\nPlayMusic.prototype.getPlayLists = function (callback) {\n    var that = this;\n    this.request({\n        method: \"POST\",\n        url: this._baseURL + 'playlistfeed'\n    }, function(err, body) {\n        callback(err ? new Error(\"error getting playlist results: \" + err) : null, body);\n    });\n};\n\n/**\n* Creates a new playlist\n*\n* @param playlistName string - the playlist name\n* @param callback function(err, mutationStatus) - success callback\n*/\nPlayMusic.prototype.addPlayList = function (playlistName, callback) {\n    var that = this;\n    var mutations = [\n    {\n        \"create\": {\n            \"creationTimestamp\": -1,\n            \"deleted\": false,\n            \"lastModifiedTimestamp\": 0,\n            \"name\": playlistName,\n            \"type\": \"USER_GENERATED\"\n        }\n    }\n    ];\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'playlistbatch?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error creating playlist \" + err) : null, body);\n    });\n};\n\n/**\n* Updates a playlist's metadata\n*\n* @param playlistId string - the playlist id\n* @param updates object - data to update the playlist with\n* @param callback function(err, mutationStatus) - success callback\n*/\nPlayMusic.prototype.updatePlayListMeta = function (playlistId, updates, callback) {\n    var that = this;\n    var mutations = [\n    {\n        \"update\": {\n            \"id\": playlistId,\n            \"name\": updates.name || null,\n            \"description\": updates.description || null,\n            \"shareState\": updates.shareState || null\n        }\n    }\n    ];\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'playlistbatch?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error updating playlist metadata \" + err) : null, body);\n    });\n};\n\n/**\n* Adds a track to end of a playlist.\n*\n* @param songId string - the song id. Or an array of song ids\n* @param playlistId int - the playlist id\n* @param callback function(err, mutationStatus) - success callback\n*/\nPlayMusic.prototype.addTrackToPlayList = function (songIds, playlistId, callback) {\n    var that = this;\n    var songIdsArray = Array.isArray(songIds) ? songIds : [songIds];\n    var mutations = [];\n    songIdsArray.forEach(function(songId) {\n        mutations.push(\n            {\n                \"create\": {\n                    \"clientId\": uuid.v1(),\n                    \"creationTimestamp\": \"-1\",\n                    \"deleted\": \"false\",\n                    \"lastModifiedTimestamp\": \"0\",\n                    \"playlistId\": playlistId,\n                    \"source\": (songId.indexOf(\"T\") === 0 ? \"2\" : \"1\"),\n                    \"trackId\": songId\n                }\n            }\n        );\n    });\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'plentriesbatch?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error adding tracks to playlist: \" + err) : null, body);\n    });\n};\n\n/**\n* Increments track's playcount\n*\n* @param songId int - the song id. See http://bit.ly/1L4U6oK for id requirements.\n* @param callback function(err, mutationStatus) - success callback\n*/\nPlayMusic.prototype.incrementTrackPlaycount = function (songId, callback) {\n    var that = this;\n    var stats = [\n        {\n            \"id\": songId,\n            \"incremental_plays\": \"1\",\n            \"last_play_time_millis\": Date.now().toString(),\n            \"type\": (songId.indexOf(\"T\") === 0 ? \"2\" : \"1\"),\n            \"track_events\": []\n        }\n    ];\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'trackstats?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"track_stats\": stats})\n    }, function(err, body) {\n        callback(err ? new Error(\"error incrementing track playcount: \" + err) : null, body);\n    });\n};\n\n/* Change metadata of a track a library\n* Currently only support changing rating\n* You need to change a song object with a different rating value:\n* 5 = thumb up, 1 = thumb down, 0 = no thumb\n* @param song object - the track dictionnary. You can get from getAllAccessTrack or from getLibrary\n* @param callback function(err, success) - success callback\n*/\nPlayMusic.prototype.changeTrackMetadata = function (song, callback) {\n\n    var that = this;\n    var mutations = [ { \"update\": song } ];\n\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'trackbatch?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error changing rating track: \" + err) : null, body);\n    });\n}\n\n/**\n* Removes given entry ids from playlist entries\n*\n* @param entryId string - the entry id. Or an array of entry ids. You can get this from getPlayListEntries\n* @param callback function(err, mutationStatus) - success callback\n*/\nPlayMusic.prototype.removePlayListEntry = function (entryIds, callback) {\n    var that = this;\n    var entryIdsArray = Array.isArray(entryIds) ? entryIds : [entryIds];\n    var mutations = [];\n    entryIdsArray.forEach(function(entryId) {\n        mutations.push({ \"delete\": entryId });\n    });\n\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'plentriesbatch?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error removing playlist entries: \" + err) : null, body);\n    });\n};\n\n/**\n * Returns tracks on all playlists.\n *\n * @param opts Object - parameters\n * @param callback function(err, playlistEntries) - success callback\n */\nPlayMusic.prototype.getPlayListEntries = function (opts, callback) {\n    var that = this;\n\n    // If first parameter is a callback, shift it over to the second param\n    if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n    }\n    // Set options defaults\n    opts.limit = opts.limit || 1000;\n\n    // Request body data\n    var data = {\"max-results\": opts.limit};\n    // Add 'start-token' if a continuation token was provided\n    if (!!opts.nextPageToken) {\n        data[\"start-token\"] = opts.nextPageToken;\n    }\n\n    this.request({\n        method: \"POST\",\n        url: this._baseURL + 'plentryfeed',\n        contentType: \"application/json\",\n        data: JSON.stringify(data)\n    }, function (err, body) {\n        callback(err ? new Error(\"error getting playlist results: \" + err) : null, body);\n    });\n};\n\n\n/**\n * Returns tracks on shared playlist.\n *\n * @param opts Object - parameters\n * @param callback function(err, playlistEntries) - success callback\n */\nPlayMusic.prototype.getSharedPlayListEntries = function (opts, callback) {\n    var that = this;\n\n    // If first parameter is a callback, shift it over to the second param\n    if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n    }\n    // Set options defaults\n    opts.limit = opts.limit || 1000;\n\n    // Request body data\n    var data = {\"max-results\": opts.limit};\n    // Add 'start-token' if a continuation token was provided\n    if (!!opts.nextPageToken) {\n        data[\"start-token\"] = opts.nextPageToken;\n    }\n\n    data['shareToken'] = opts.shareToken;\n\n    this.request({\n        method: \"POST\",\n        url: this._baseURL + 'plentries/shared',\n        contentType: \"application/json\",\n        data: JSON.stringify({\n            'entries': [data]\n        })\n    }, function (err, body) {\n        callback(err ? new Error(\"error getting playlist results: \" + err) : null, body);\n    });\n};\n\n/**\n * Returns info about an All Access album.  Does not work for uploaded songs.\n *\n * @param albumId string All Access album \"nid\" -- WILL NOT ACCEPT album \"id\" (requires \"T\" id, not hyphenated id)\n * @param includeTracks boolean -- include track list\n * @param callback function(err, albumList) - success callback\n */\nPlayMusic.prototype.getAlbum = function (albumId, includeTracks, callback) {\n    var that = this;\n    this.request({\n        method: \"GET\",\n        url: this._baseURL + \"fetchalbum?\" + querystring.stringify({nid: albumId, \"include-tracks\": includeTracks, alt: \"json\"})\n    }, function(err, body) {\n        callback(err ? new Error(\"error getting album tracks: \" + err) : null, body);\n    });\n};\n\n/**\n * Returns info about an All Access track.  Does not work for uploaded songs.\n *\n * @param trackId string All Access track \"nid\" -- WILL NOT ACCEPT track \"id\" (requires \"T\" id, not hyphenated id)\n * @param callback function(err, trackInfo) - success callback\n */\nPlayMusic.prototype.getAllAccessTrack = function (trackId, callback) {\n    var that = this;\n    this.request({\n        method: \"GET\",\n        url: this._baseURL + \"fetchtrack?\" + querystring.stringify({nid: trackId, alt: \"json\"})\n    }, function(err, body) {\n        callback(err ? new Error(\"error getting all access track: \" + err) : null, body);\n    });\n};\n\n/**\n * Returns Artist Info, top tracks, albums, related artists\n *\n * @param artistId string - not sure which id this is\n * @param includeAlbums boolean - should album list be included in result\n * @param topTrackCount int - number of top tracks to return\n * @param relatedArtistCount int - number of related artists to return\n * @param callback function(err, artistInfo) - success callback\n */\nPlayMusic.prototype.getArtist = function (artistId, includeAlbums, topTrackCount, relatedArtistCount, callback) {\n    var that = this;\n    this.request({\n        method: \"GET\",\n        url: this._baseURL + \"fetchartist?\" + querystring.stringify({\n            nid: artistId,\n            \"include-albums\": includeAlbums,\n            \"num-top-tracks\": topTrackCount,\n            \"num-related-artists\": relatedArtistCount,\n            alt: \"json\"\n        })\n    }, function(err, body) {\n        callback(err ? new Error(\"error getting artist info: \" + err) : null, body);\n    });\n};\n\n/**\n * Builds a seed object for use with createStation\n *\n * @param seedId string - a track, artist, album, or genre id\n * @param type string - one of [\"track\", \"artist\", \"album\", \"genre\"]\n * @return object - seed object for use with createStation\n */\nPlayMusic.prototype._getSeed = function(seedId, type) {\n    var seed;\n    if(type === \"track\" && seedId.charAt(0) === \"T\") {\n        seed = {trackId: seedId, seedType: 2};\n    } else if(type === \"track\") {\n        seed = {trackId: seedId, seedType: 1};\n    } else if(type === \"artist\") {\n        seed = {artistId: seedId, seedType: 3};\n    } else if(type === \"album\") {\n        seed = {albumId: seedId, seedType: 4};\n    } else if(type === \"genre\") {\n        seed = {genreId: seedId, seedType: 5};\n    } else if(type === \"station\") {\n        seed = {curatedStationId: seedId, seedType: 9};\n    }\n    return seed;\n};\n\n/**\n * Returns list of existing stations\n *\n * @param callback function(err, stationInfo) - success callback\n */\nPlayMusic.prototype.getStations = function(callback) {\n    var that = this;\n\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'radio/station'\n        //data: JSON.stringify(obj)\n    }, function(err, body) {\n        callback(err ? new Error(\"error listing stations: \" + err) : null, body);\n    });\n};\n\n\n/**\n * Creates a new station\n *\n * @param name string - name of new station\n * @param seedId string - a track, artist, album, or genre id\n * @param type string - one of [\"track\", \"artist\", \"album\", \"genre\"]\n * @param callback function(err, mutationStatus) - success callback\n */\nPlayMusic.prototype.createStation = function(name, seedId, type, callback) {\n    var that = this;\n    var seed = this._getSeed(seedId, type);\n    if(!seed) return callback(new Error(\"Invalid Seed type\"));\n    var mutations = [\n        {\n            \"createOrGet\": {\n                \"clientId\": uuid.v1(),\n                \"deleted\": false,\n                \"imageType\": 1,\n                \"lastModifiedTimestamp\": \"-1\", // + (new Date()).valueOf()*1000,\n                \"name\": name,\n                \"recentTimeStamp\": \"\" + (new Date()).valueOf()*1000,\n                \"seed\": seed,\n                \"tracks\": []\n            },\n            \"includeFeed\": false,\n            \"numEntries\": 0,\n            \"params\": { \"contentFilter\": 1 }\n        }\n    ];\n\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'radio/editstation?' + querystring.stringify({alt: \"json\"}),\n        data: JSON.stringify({\"mutations\": mutations})\n    }, function(err, body) {\n        callback(err ? new Error(\"error creating station: \" + err) : null, body);\n    });\n};\n\n/**\n * Gets a list of tracks for a given station id\n *\n * @param stationId string - id of station\n * @param tracks int - number of tracks to return\n * @param callback function(err, stationInfo) - success callback\n */\nPlayMusic.prototype.getStationTracks = function(stationId, tracks, callback) {\n    var that = this;\n    var obj = {\n        \"contentFilter\": 1,\n        \"stations\": [{\n            \"radioId\": stationId,\n            \"numEntries\": tracks,\n            \"recentlyPlayed\": []\n        }]\n    };\n\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._baseURL + 'radio/stationfeed?' + querystring.stringify({alt: \"json\", \"include-tracks\": \"true\"}),\n        data: JSON.stringify(obj)\n    }, function(err, body) {\n        callback(err ? new Error(\"error getting station tracks: \" + err) : null, body);\n    });\n};\n\nPlayMusic.prototype.getFavorites = function(callback) {\n    this.request({\n        method: \"POST\",\n        contentType: \"application/json\",\n        url: this._webURL + 'services/getephemthumbsup'\n    }, function(err, body) {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            body = JSON.parse(body);\n        } catch (err) {\n            return callback(err);\n        };\n        callback(null, body);\n    });\n};\n\n// So we don't break things using \"getFavotites\"\nPlayMusic.prototype.getFavotites = PlayMusic.prototype.getFavorites;\n\nmodule.exports = exports = PlayMusic;\n"}